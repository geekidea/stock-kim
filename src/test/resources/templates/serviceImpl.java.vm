package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
#if(${cfg.generatorPageMethod})
import ${cfg.queryParamPath};
#end
import ${cfg.queryVoPath};
import ${superServiceImplClassPackage};
import ${cfg.paging};
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.metadata.OrderItem;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import java.io.Serializable;


/**
 * <pre>
 * $!{table.comment} 服务实现类
 * </pre>
 *
 * http://stock.kim
 * doc.stock.kim
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends BaseServiceImpl<${table.mapperName}, ${entity}> implements ${table.serviceName} {

    @Autowired
    private ${table.mapperName} ${cfg.mapperObjectName};
    #if(${cfg.generatorAddMethod})

    @Transactional(rollbackFor = Exception.class)
    @Override
    public boolean save${entity}(${entity} ${cfg.entityObjectName}) throws Exception {
        return save(${cfg.entityObjectName});
    }
    #end
    #if(${cfg.generatorUpdateMethod})

    @Transactional(rollbackFor = Exception.class)
    @Override
    public boolean update${entity}(${entity} ${cfg.entityObjectName}) throws Exception {
        return updateById(${cfg.entityObjectName});
    }
    #end
    #if(${cfg.generatorDeleteMethod})

    @Transactional(rollbackFor = Exception.class)
    @Override
    public boolean delete${entity}(Long id) throws Exception {
        return removeById(id);
    }
    #end
    #if(${cfg.generatorInfoMethod})

    @Override
    public ${entity} get${entity}ById(Long id) throws Exception {
        return getById(id);
    }
    #end
    #if(${cfg.generatorPageMethod})

    @Override
    public Paging<${entity}> get${entity}PageList(${entity}Query ${cfg.entityObjectName}Query) throws Exception {
        Page page = buildPageQuery(${cfg.entityObjectName}Query, OrderItem.desc("create_time"));
        IPage<${entity}> iPage = ${cfg.mapperObjectName}.get${entity}PageList(page, ${cfg.entityObjectName}Query);
        return new Paging(iPage);
    }
    #end

}
#end
