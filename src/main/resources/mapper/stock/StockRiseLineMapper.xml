<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2019-2029 geekidea(https://github.com/geekidea)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.geekidea.stock.mapper.StockRiseLineMapper">

    <select id="getStockRiseLineById" resultType="io.geekidea.stock.dto.vo.StockRiseLineQueryVo">
        select *
        from stock_rise_line
        where id = #{id}
    </select>

    <select id="getStockRiseLinePageList" resultType="io.geekidea.stock.dto.vo.StockRiseLineQueryVo">
        select *
        from stock_rise_line
    </select>

    <select id="getRiseCountList" resultType="io.geekidea.stock.entity.StockRiseLine">
        select x.line_date, rise_count, sum total_count, round(rise_count / sum * 100, 2) rise_percentage
        from (
                 select line_date, count(1) rise_count
                 from stock_k_line
                 where increase is not null
                   and increase > 0
                   and line_date > (select ifnull(max(line_date), '2021-03-01') from stock_rise_line)
                 group by line_date
             ) x
                 inner join (
            select line_date, count(1) sum
            from stock_k_line
            where increase is not null
              and line_date > (select ifnull(max(line_date), '2021-03-01') from stock_rise_line)
            group by line_date
        ) y
                            on x.line_date = y.line_date
        order by x.line_date
    </select>

    <select id="getTodayRiseCount" resultType="io.geekidea.stock.entity.StockRiseLine">
        select (select max(real_date) from stock) line_date,
               (select count(1)
                from stock
                where open_price is not null
                  and trade_number is not null
                   <if test="optionalYn">
                       and optional_yn = 1
                   </if>
                   )   total_count,
               (select count(1)
                from stock
                where open_price is not null
                  and trade_number is not null
                  and increase > 0
                    <if test="optionalYn">
                        and optional_yn = 1
                    </if>
                   )               rise_count
    </select>

    <select id="getStockRiseLineList" resultType="io.geekidea.stock.dto.vo.LineNamveValueVo">
        select line_date name, rise_count value
        from (
                 select *
                 from stock_rise_line
                 order by line_date desc
                 limit 136
             ) tb
        order by line_date
    </select>

    <select id="getCount" resultType="java.lang.Integer">
        select count(1)
        from stock_rise_line
        where line_date = #{lineDate}
    </select>

</mapper>
